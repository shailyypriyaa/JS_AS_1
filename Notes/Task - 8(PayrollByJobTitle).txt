Task - 8(PayrollByJobTitle)
package com.crud.restAPI.CRUDApplication.controller;

import com.crud.restAPI.CRUDApplication.model.Employee;
import com.crud.restAPI.CRUDApplication.service.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/employees")
public class EmployeeController {
    @Autowired
    private EmployeeService employeeService;

    @PostMapping
    public ResponseEntity<Employee> createEmployee(@RequestBody Employee employee) {
        Employee savedEmployee = employeeService.saveEmployee(employee);
        return ResponseEntity.ok(savedEmployee);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Employee> getEmployee(@PathVariable Long id) {
        Optional<Employee> employee = employeeService.getEmployeeById(id);
        return employee.map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PutMapping("/{id}")
    public ResponseEntity<Employee> updateEmployee(@PathVariable Long id, @RequestBody Employee updatedEmployee) {
        try {
            Employee employee = employeeService.updateEmployee(id, updatedEmployee);
            return ResponseEntity.ok(employee);
        } catch (RuntimeException e) {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteEmployee(@PathVariable Long id) {
        employeeService.deleteEmployee(id);
        return ResponseEntity.ok().build();
    }

    @GetMapping("/payroll")
    public ResponseEntity<Map<String, Object>> getPayroll() {
        Double totalPayroll = employeeService.calculateTotalPayroll(); // Call the service layer method

        // Create response map
        Map<String, Object> response = new HashMap<>();
        response.put("timestamp", LocalDateTime.now());
        response.put("totalPayroll", totalPayroll);
        response.put("message", "Payroll calculation completed successfully");

        // Return the payroll as part of the HTTP Response
        return ResponseEntity.ok(response);
    }

    @GetMapping("/department/{departmentName}/average-salary")
    public ResponseEntity<Map<String, Object>> getAverageSalary(@PathVariable String departmentName) {
        Double avgSalary = employeeService.calculateAverageSalaryByDepartment(departmentName); // Call the service layer method

        // Create response map
        Map<String, Object> response = new HashMap<>();
        response.put("timestamp", LocalDateTime.now());
        response.put("Average Salary", avgSalary);
        response.put("message", "Average Salary is displayed completed successfully");

        // Return the payroll as part of the HTTP Response
        return ResponseEntity.ok(response);
    }

    @GetMapping("/grouped-by-department")
    public ResponseEntity<Map<String, Object>> groupDepartments() {
        Map<String, List<Employee>> groupedEmployees = employeeService.getEmployeesGroupedByDepartment(); // Call the service layer method

        // Create response map
        Map<String, Object> response = new HashMap<>();
        response.put("timestamp", LocalDateTime.now());
        response.put("Grouped Employees", groupedEmployees);
        response.put("message", "Grouping of employees are completed successfully");

        // Return the payroll as part of the HTTP Response
        return ResponseEntity.ok(response);
    }

    @GetMapping("/top-salaries/{n}")
    public ResponseEntity<Map<String, Object>> topPaidEmployees(@PathVariable int n) {
        List<Employee> topEmployees = employeeService.getTopNHighestPaidEmployees(n); // Call the service layer method

        // Create response map
        Map<String, Object> response = new HashMap<>();
        response.put("timestamp", LocalDateTime.now());
        response.put("Top paid Employees", topEmployees);
        response.put("message", "Top paid employees are displayed successfully");

        // Return the payroll as part of the HTTP Response
        return ResponseEntity.ok(response);
    }

    @GetMapping("/payroll/job-title/{jobTitle}")
    public ResponseEntity<Map<String, Object>> filterByTitle(@PathVariable String jobTitle) {
        Double resultedEmployees = employeeService.calculatePayrollByJobTitle(jobTitle); // Call the service layer method

        // Create response map
        Map<String, Object> response = new HashMap<>();
        response.put("timestamp", LocalDateTime.now());
        response.put("Filtered Employees", resultedEmployees);
        response.put("message", "Filtration completed successfully");

        // Return the payroll as part of the HTTP Response
        return ResponseEntity.ok(response);
    }


}






package com.crud.restAPI.CRUDApplication.exception;

public class EmployeeNotFoundException extends RuntimeException {
    public EmployeeNotFoundException(String message) {
        super(message);
    }
}

package com.crud.restAPI.CRUDApplication.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

@RestControllerAdvice
public class GlobalExceptionHandler {

    // Handle Employee Not Found Exception
    @ExceptionHandler(EmployeeNotFoundException.class)
    public ResponseEntity<Map<String, Object>> handleEmployeeNotFoundException(EmployeeNotFoundException ex) {
        Map<String, Object> errorResponse = new HashMap<>();
        errorResponse.put("timestamp", LocalDateTime.now());
        errorResponse.put("status", HttpStatus.NOT_FOUND.value());
        errorResponse.put("error", "Employee Not Found");
        errorResponse.put("message", ex.getMessage());
        errorResponse.put("path", "/api/employees"); // You can log exact path if needed

        return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);
    }

    // Handle General Exception (Fallback)
    @ExceptionHandler(Exception.class)
    public ResponseEntity<Map<String, Object>> handleGeneralException(Exception ex) {
        Map<String, Object> errorResponse = new HashMap<>();
        errorResponse.put("timestamp", LocalDateTime.now());
        errorResponse.put("status", HttpStatus.INTERNAL_SERVER_ERROR.value());
        errorResponse.put("error", "Internal Server Error");
        errorResponse.put("message", ex.getMessage());
        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}


package com.crud.restAPI.CRUDApplication.model;

import jakarta.persistence.*;

@Entity
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String department;
    private Double salary;
    private String jobTitle;

    // Getters & Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Name can't be null");
        }
        this.name = name;
    }

    public String getDepartment() {
        return department;
    }

    public void setDepartment(String department) {
        if (department == null || department.trim().isEmpty()) {
            throw new IllegalArgumentException("department can't be null");
        }
        this.department = department;
    }

    public Double getSalary() {
        return salary;
    }

    public void setSalary(Double salary) {
        if (salary < 0)
            throw new IllegalArgumentException("Salary can't be negative");
        this.salary = salary;
    }

    public String getJobTitle() {
        return jobTitle;
    }

    public void setJobTitle(String jobTitle) {
        if (jobTitle == null || jobTitle.trim().isEmpty()) {
            throw new IllegalArgumentException("jobTitle can't be null");
        }
        this.jobTitle = jobTitle;
    }
}



package com.crud.restAPI.CRUDApplication.repository;

import com.crud.restAPI.CRUDApplication.model.Employee;
import org.springframework.data.jpa.repository.JpaRepository;

public interface EmployeeRepository extends JpaRepository<Employee, Long> {
}



package com.crud.restAPI.CRUDApplication;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CrudApplication {

	public static void main(String[] args) {
		SpringApplication.run(CrudApplication.class, args);
	}

}

package com.crud.restAPI.CRUDApplication.service;

import com.crud.restAPI.CRUDApplication.exception.EmployeeNotFoundException;
import com.crud.restAPI.CRUDApplication.model.Employee;
import com.crud.restAPI.CRUDApplication.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class EmployeeService {
    @Autowired
    private EmployeeRepository employeeRepository;

    public Employee saveEmployee(Employee employee) {
        return employeeRepository.save(employee);
    }

    public Optional<Employee> getEmployeeById(Long id) {
        Optional<Employee> employee = employeeRepository.findById(id);
        if (employee.isEmpty()) {
            throw new EmployeeNotFoundException("Employee with ID " + id + " not found");
        }
        return employee;
    }

    public Employee updateEmployee(Long id, Employee updatedEmployee) {
        return employeeRepository.findById(id).map(employee -> {
            employee.setName(updatedEmployee.getName());
            employee.setDepartment(updatedEmployee.getDepartment());
            employee.setSalary(updatedEmployee.getSalary());
            employee.setJobTitle(updatedEmployee.getJobTitle());
            return employeeRepository.save(employee);
        }).orElseThrow(() -> new EmployeeNotFoundException("Employee with ID " + id + " not found"));
    }

    public void deleteEmployee(Long id) {
        if (!employeeRepository.existsById(id)) {
            throw new EmployeeNotFoundException("Employee with ID " + id + " not found");
        }
        employeeRepository.deleteById(id);
    }

    public Double calculateTotalPayroll() {
        List<Employee> employees = employeeRepository.findAll(); // Fetch all employees from the database
        double totalPayroll = 0.0;

        if (employees == null || employees.isEmpty()) {
            throw new RuntimeException("No employees found in the database."); // Throw a custom runtime exception
        }

        // Example logic for payroll calculation based on roles
        for (Employee employee : employees) {

            if (employee == null) {
                throw new RuntimeException("Invalid data: An employee in the list is null.");
            }

            String department = employee.getDepartment(); // Get the department of the employee

            // Handle null or unknown department
            if (department == null || department.isBlank()) {
                department = "General"; // Assign default department
            }

            switch (department) { // Map role to department
                case "Manager":
                    totalPayroll += employee.getSalary()+10000.0; // Base pay, add bonuses if applicable
                    break;
                case "HR":
                    totalPayroll += employee.getSalary() + 500.0; // Add fixed HR bonus
                    break;
                default: // Default case if the department is unknown
                    totalPayroll += employee.getSalary();
            }
        }
        return  totalPayroll;
    }

    public Double calculateAverageSalaryByDepartment(String departmentName)
    {
        List<Employee> employees = employeeRepository.findAll(); // Retrieve all employees

        // Filter employees by department, map their salaries, and calculate the average
        return employees.stream()
                .filter(employee -> departmentName.equals(employee.getDepartment())) // Filter by department
                .mapToDouble(Employee::getSalary) // Map to salaries
                .average() // Calculate the average
                .orElse(0.0); // Return 0.0 if no employees match the department

    }

    public Map<String, List<Employee>> getEmployeesGroupedByDepartment()
    {
        List<Employee> employees = employeeRepository.findAll(); // Fetch all employees from the database


        if (employees == null || employees.isEmpty()) {
            throw new RuntimeException("No employees found in the database."); // Throw a custom runtime exception
        }

        return employees.stream()
                .collect(Collectors.groupingBy(Employee::getDepartment));
    }

    public List<Employee> getTopNHighestPaidEmployees(int n)
    {
        List<Employee> employees = employeeRepository.findAll(); // Fetch all employees from the database


        if (employees == null || employees.isEmpty()) {
            throw new RuntimeException("No employees found in the database."); // Throw a custom runtime exception
        }

        return employees.stream().sorted(Comparator.comparingDouble(Employee::getSalary).reversed()).limit(n).collect(Collectors.toList());
    }

    public Double calculatePayrollByJobTitle(String jobTitle)
    {
        List<Employee> employees = employeeRepository.findAll(); // Fetch all employees from the database


        if (employees == null || employees.isEmpty()) {
            throw new RuntimeException("No employees found in the database."); // Throw a custom runtime exception
        }

        return employees.stream().filter(employee -> jobTitle.equals(employee.getJobTitle())).mapToDouble(Employee::getSalary).sum();
    }
}
